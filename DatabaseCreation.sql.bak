DROP DATABASE Advising_Team_109
CREATE DATABASE Advising_Team_109
-------------------
DROP PROCEDURE CreateALLTABLE
go
CREATE PROCEDURE CreateALLTABLE
AS  
BEGIN
    CREATE TABLE Advisor(
        advisor_id INT PRIMARY KEY IDENTITY,
        name VARCHAR(40),
        email VARCHAR(40),
        office VARCHAR(40),
        password VARCHAR(40)
    )

    
    CREATE TABLE Student(
        student_id INT PRIMARY KEY IDENTITY,
        f_name VARCHAR(40) NOT NULL,
        l_name VARCHAR(40) NOT NULL,
        gpa DECIMAL(3,2), -- Question 1
        faculty VARCHAR(40),
        email VARCHAR(40),
        major VARCHAR(40),
        password VARCHAR(40),
        financial_status BIT, -- Question 2 =D
        semester INT,
        acquired_hours INT,
        assigned_hours INT,
        advisor_id INT,
		CONSTRAINT fk_student_advisor FOREIGN KEY (advisor_id) REFERENCES Advisor(advisor_id) ON DELETE SET NULL ON UPDATE CASCADE,
        CONSTRAINT check_gpa CHECK (gpa BETWEEN 0.7 AND 5)
    )


    CREATE TABLE Student_Phone(
        student_id INT,
        phone_number VARCHAR(40),
        CONSTRAINT pk_Student_phone PRIMARY KEY (
            student_id,
            phone_number
        ),
		CONSTRAINT fk_phone_student FOREIGN KEY (student_id) REFERENCES Student(student_id) ON DELETE CASCADE ON UPDATE CASCADE
    )

    CREATE TABLE Course(
        course_id INT PRIMARY KEY IDENTITY,
        name VARCHAR(40),
        major VARCHAR(40),
        is_offered BIT,
        credit_hours INT,
        semester INT
    )

    CREATE TABLE PreqCourse_course(
        prerequisite_course_id INT,
        course_id INT,
        CONSTRAINT pk_PreqCourse_course PRIMARY KEY (
            prerequisite_course_id,
            course_id
        ),
        CONSTRAINT fk_preqCourse_course FOREIGN KEY (course_id) REFERENCES Course(course_id),
        CONSTRAINT fk_preqCourse_prereq FOREIGN KEY (prerequisite_course_id) REFERENCES Course(course_id)
    )

    CREATE TABLE Instructor(
        instructor_id INT PRIMARY KEY IDENTITY, -- Question 3 
        name VARCHAR(40),
        email VARCHAR(40),
        faculty VARCHAR(40),
        office VARCHAR(40)
    )


    CREATE TABLE Instructor_Course (
        course_id INT,
        instructor_id INT,
        CONSTRAINT fk_instructorCourse_course FOREIGN KEY (course_id) REFERENCES Course(course_id) ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT fk_instructorCourse_instructor FOREIGN KEY (instructor_id) REFERENCES Instructor(instructor_id) ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT pk_Instructor_Course PRIMARY KEY (
            course_id,
            instructor_id
        )
    )


    CREATE TABLE Student_Instructor_Course_Take(
        student_id INT,
        course_id INT,
        instructor_id INT,
        semester_code VARCHAR(40),
        exam_type VARCHAR(40),
        grade VARCHAR(40) ,-- QUESTION 4 (Answered)
        CONSTRAINT fk_take_student FOREIGN KEY (student_id) REFERENCES Student(student_id) ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT fk_take_course FOREIGN KEY (course_id) REFERENCES Course(course_id) ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT fk_take_instructor FOREIGN KEY (instructor_id) REFERENCES Instructor(instructor_id) ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT pk_Student_Instructor_Course_Take PRIMARY KEY(
            student_id,
            course_id,
            semester_code
        )

    )


    CREATE TABLE Semester(
        semester_code VARCHAR(40) PRIMARY KEY,
        start_date DATE,
        end_date DATE
    )


    CREATE TABLE Course_Semester(
        course_id INT,
        semester_code VARCHAR(40),
        CONSTRAINT fk_courseSemester_course FOREIGN KEY (course_id) REFERENCES Course(course_id) ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT fk_courseSemester_semester FOREIGN KEY (semester_code) REFERENCES Semester(semester_code) ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT pk_Course_Semester PRIMARY KEY(
            course_id,
            semester_code
        )
    )

    
    CREATE TABLE Slot(
        slot_id INT PRIMARY KEY IDENTITY,
        day VARCHAR(40), -- Question 5
        time VARCHAR(40) CONSTRAINT check_time CHECK (time IN ('1','2','3','4','5')), -- Question 6
        location VARCHAR(40),
        course_id INT FOREIGN KEY REFERENCES Course(course_id),
        instructor_id INT FOREIGN KEY REFERENCES Instructor(instructor_id) 
    )


    CREATE TABLE Graduation_Plan(
        plan_id INT IDENTITY,
        semster_code VARCHAR(40),
        semster_credit_hours INT,
        expected_grad_date DATE,
        advisor_id INT,
        student_id INT,
        CONSTRAINT fk_gradPLan_advisor FOREIGN KEY (advisor_id) REFERENCES Advisor(advisor_id) ON DELETE SET NULL ON UPDATE CASCADE,
        CONSTRAINT fk_gradPLan_student FOREIGN KEY (student_id) REFERENCES Student(student_id),
        CONSTRAINT pk_Graduation_Plan PRIMARY KEY(
            plan_id,
            semster_code
        )
    )


    CREATE TABLE GradPlan_Course(
        plan_id INT,
        semster_code VARCHAR(40),
        course_id INT,
        CONSTRAINT fk_gradPlanCourse_gradPlan FOREIGN KEY (plan_id,semster_code) REFERENCES Graduation_Plan(plan_id,semster_code),
        CONSTRAINT pk_GradPlan_Course primary key(
            plan_id,
            semster_code,
            course_id
        )
    )

    CREATE TABLE Payment(
        payment_id INT PRIMARY KEY IDENTITY,
        amount INT, -- Question 9 "DONE?"
        deadline DATETIME,
<<<<<<< Updated upstream
        n_installments INT,
        status VARCHAR(40) default 'notPaid', -- Question 7
        fund_percentage DECIMAL,
        start_date DATETIME,
        student_id INT FOREIGN KEY REFERENCES Student(student_id),
        semester_code VARCHAR(40) REFERENCES Semester(semester_code),
=======
        n_installments INT, --should we derive this?
        status VARCHAR(40) NOT NULL DEFAULT 'notPaid', -- Question 7
        fund_percentage DECIMAL(5,2),
        student_id INT,
        semester_code VARCHAR(40),
        CONSTRAINT fk_payment_student FOREIGN KEY (student_id) REFERENCES Student(student_id) ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT fk_payment_semester FOREIGN KEY (semester_code) REFERENCES Semester(semester_code) ON DELETE SET NULL ON UPDATE CASCADE,
>>>>>>> Stashed changes
    )

    CREATE TABLE Installment(
        payment_id INT,
        deadline DATETIME,
        amount INT, -- Question 9 "DONE?"
        status VARCHAR(40) NOT NULL DEFAULT 'notPaid',
        start_date DATETIME,
        CONSTRAINT pk_Installment PRIMARY KEY (payment_id, deadline),
        CONSTRAINT fk_installment_payment FOREIGN KEY(payment_id) REFERENCES Payment(payment_id) ON DELETE CASCADE ON UPDATE CASCADE
    )


    CREATE TABLE Request(
        request_id INT PRIMARY KEY IDENTITY,
        type VARCHAR(40),
        comment VARCHAR(40),
        status VARCHAR(40) DEFAULT 'pending',
        credit_hours INT, -- Question 8
        student_id INT,
        advisor_id INT,
        course_id INT,
        CONSTRAINT fk_request_student FOREIGN KEY (student_id) REFERENCES Student(student_id) ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT fk_request_advisor FOREIGN KEY (advisor_id) REFERENCES Advisor(advisor_id),
        CONSTRAINT fk_request_course FOREIGN KEY (course_id) REFERENCES Course(course_id) ON DELETE CASCADE ON UPDATE CASCADE,
    )

    CREATE TABLE MakeUp_Exam(
        exam_id INT PRIMARY KEY IDENTITY,
        date DATETIME,
        type VARCHAR(40),
        course_id INT,
        CONSTRAINT fk_makeUp_course FOREIGN KEY (course_id) REFERENCES Course(course_id) ON DELETE CASCADE ON UPDATE CASCADE
    )

    CREATE TABLE Exam_Student(
        exam_id INT,
        student_id INT,
        course_id INT,
        CONSTRAINT pk_Exam_Student PRIMARY KEY(exam_id, student_id),
        CONSTRAINT fk_exam_makeUp FOREIGN KEY (exam_id) REFERENCES MakeUp_Exam(exam_id) ON DELETE CASCADE ON UPDATE CASCADE,
        CONSTRAINT fk_exam_student FOREIGN KEY (student_id) REFERENCES Student(student_id) ON DELETE CASCADE ON UPDATE CASCADE,
    )

END;

EXEC CreateALLTABLE